# type Bool = True | False;

type List A = Nil | Cons A (List A);

intId : Int -> Int = \(i : Int) -> i;

id : forall A . A -> A = /\A . \(x : A) -> x;

true : Bool = id [Bool] True;

empty : {} = {};

tuple : {Int, Bool, Float, Char} = {1, True, 1.23, 'c'};

main : IO Char =
  let (c : Char) <- read_char
  in return [IO] c;

stateIO : (State ::: IO) Unit =
  lift [IO => State ::: IO] return [IO] unit;

caseExpr : Id Int =
  let (x : Bool) <- return [Id] True
  in case x of
       | True => return [Id] 0
       | False => return [Id] 1
     end;

