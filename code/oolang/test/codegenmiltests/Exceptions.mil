type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s_ : String) ->
    case s_ of
      | Empty_Str =>
          return [Error Unit ::: (NonTerm ::: (State ::: IO))]
            unit
      | Cons_Str (c_ : Char) (cs_ : String) =>
          let (unit_0 : Unit) <-
            lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] print_char c_
          in printString cs_
    end;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  readString_ Empty_Str;

readString_ : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  \(acc_ : String) ->
    let (c_ : Char) <-
      lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
    in case c_ of
         | ' ' =>
             return [Error Unit ::: (NonTerm ::: (State ::: IO))]
               reverseString_ acc_ Empty_Str
         | _ =>
             readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str =>
            acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b_ : Bool) ->
    case b_ of
      | True =>
          printString (Cons_Str 't' (Cons_Str 'r' (Cons_Str 'u' (Cons_Str 'e' Empty_Str))))
      | False =>
          printString (Cons_Str 'f' (Cons_Str 'a' (Cons_Str 'l' (Cons_Str 's' (Cons_Str 'e' Empty_Str)))))
    end;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  let (c_1 : Char) <-
    lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
  in case c_1 of
       | 't' =>
           let (c_2 : Char) <-
             lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
           in case c_2 of
                | 'r' =>
                    let (c_3 : Char) <-
                      lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                    in case c_3 of
                         | 'u' =>
                             let (c_4 : Char) <-
                               lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                             in case c_4 of
                                  | 'e' =>
                                      let (c_5 : Char) <-
                                        lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                                      in case c_5 of
                                           | ' ' =>
                                               return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                                 True
                                           | _ =>
                                               let (errRes_ : Bool) <-
                                                 throw_error [Unit] [Bool] unit
                                               in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                                    errRes_
                                         end
                                  | _ =>
                                      let (errRes_ : Bool) <-
                                        throw_error [Unit] [Bool] unit
                                      in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                           errRes_
                                end
                         | _ =>
                             let (errRes_ : Bool) <-
                               throw_error [Unit] [Bool] unit
                             in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                  errRes_
                       end
                | _ =>
                    let (errRes_ : Bool) <-
                      throw_error [Unit] [Bool] unit
                    in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                         errRes_
              end
       | 'f' =>
           let (c_2 : Char) <-
             lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
           in case c_2 of
                | 'a' =>
                    let (c_3 : Char) <-
                      lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                    in case c_3 of
                         | 'l' =>
                             let (c_4 : Char) <-
                               lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                             in case c_4 of
                                  | 's' =>
                                      let (c_5 : Char) <-
                                        lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                                      in case c_5 of
                                           | 'e' =>
                                               let (c_6 : Char) <-
                                                 lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] read_char
                                               in case c_6 of
                                                    | ' ' =>
                                                        return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                                          False
                                                    | _ =>
                                                        let (errRes_ : Bool) <-
                                                          throw_error [Unit] [Bool] unit
                                                        in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                                             errRes_
                                                  end
                                           | _ =>
                                               let (errRes_ : Bool) <-
                                                 throw_error [Unit] [Bool] unit
                                               in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                                    errRes_
                                         end
                                  | _ =>
                                      let (errRes_ : Bool) <-
                                        throw_error [Unit] [Bool] unit
                                      in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                           errRes_
                                end
                         | _ =>
                             let (errRes_ : Bool) <-
                               throw_error [Unit] [Bool] unit
                             in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                                  errRes_
                       end
                | _ =>
                    let (errRes_ : Bool) <-
                      throw_error [Unit] [Bool] unit
                    in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                         errRes_
              end
       | _ =>
           let (errRes_ : Bool) <-
             throw_error [Unit] [Bool] unit
           in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                errRes_
     end;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i_ : Int) ->
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f_ : Float) ->
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (x : Ref Int) <-
    let (var_14 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 0
    in lift [State => Error Unit ::: (NonTerm ::: State)] new_ref [Int] var_14
  in let (var_10 : Int) <-
       let (var_8 : Int) <-
         catch_error [Unit] [Int]
           (let (var_2 : Unit) <-
              let (var_1 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1
              in lift [State => Error Unit ::: (NonTerm ::: State)] write_ref [Int] x var_1
            in let (var_0 : Int) <- throw_error [Unit] [Int] unit
            in return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2)
           (\(error_ : Unit) ->
              let (var_5 : Unit) <-
                let (var_3 : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <-
                  return [Error Unit ::: (NonTerm ::: (State ::: IO))] printString
                in let (var_4 : String) <-
                     return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                       Cons_Str 'c' (Cons_Str 'a' (Cons_Str 't' (Cons_Str 'c' (Cons_Str 'h' Empty_Str))))
                in var_3 var_4
              in return [Error Unit ::: (NonTerm ::: (State ::: IO))] 3)
       in let (var_9 : Unit) <-
            let (var_6 : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <-
              return [Error Unit ::: (NonTerm ::: (State ::: IO))] printString
            in let (var_7 : String) <-
                 return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                   Cons_Str 'f' (Cons_Str 'i' (Cons_Str 'n' (Cons_Str 'a' (Cons_Str 'l' (Cons_Str 'l' (Cons_Str 'y' Empty_Str))))))
            in var_6 var_7
       in return [Error Unit ::: (NonTerm ::: (State ::: IO))] var_8
  in let (var_11 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <-
       return [Error Unit ::: (NonTerm ::: (State ::: IO))] printInt
  in let (var_13 : Int) <-
       let (var_12 : Ref Int) <-
         return [Error Unit ::: (NonTerm ::: (State ::: IO))] x
       in lift [State => Error Unit ::: (NonTerm ::: State)] read_ref [Int] var_12
  in var_11 var_13;

