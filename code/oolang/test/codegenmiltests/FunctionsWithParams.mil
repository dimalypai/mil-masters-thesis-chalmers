type Bool
  = True
  | False;

type Maybe A
  = Nothing
  | Just A;

alias Pure_M = Error Unit ::: NonTerm;

alias Impure_M = Error Unit ::: NonTerm ::: State ::: IO;

main : Impure_M Unit =
  let (_ : Unit) <- let (var_2 : Float -> Impure_M Unit) <- let (var_0 : Float -> Float -> Impure_M Unit) <- return [Impure_M] impureFun in
                                                              let (var_1 : Float) <- return [Impure_M] 1.0e-2 in
                                                                return [Impure_M] var_0 var_1 in
                      let (var_3 : Float) <- return [Impure_M] 2.0e-2 in
                        var_2 var_3 in
    let (var_6 : Bool -> Pure_M Unit) <- let (var_4 : Int -> Bool -> Pure_M Unit) <- return [Impure_M] pureFun in
                                           let (var_5 : Int) <- return [Impure_M] 1 in
                                             return [Impure_M] var_4 var_5 in
      let (var_7 : Bool) <- return [Impure_M] True in
        var_6 var_7;

pureFun : Int -> Bool -> Pure_M Unit =
  \(a : Int) -> \(b : Bool) -> let (_ : Float -> Impure_M Unit) <- let (var_8 : Float -> Float -> Impure_M Unit) <- return [Pure_M] impureFun in
                                                                     let (var_9 : Float) <- return [Pure_M] 1.0e-2 in
                                                                       return [Pure_M] var_8 var_9 in
                                 let (_ : Unit) <- let (var_12 : Bool -> Pure_M Unit) <- let (var_10 : Int -> Bool -> Pure_M Unit) <- return [Pure_M] pureFun in
                                                                                           let (var_11 : Int) <- return [Pure_M] a in
                                                                                             return [Pure_M] var_10 var_11 in
                                                     let (var_13 : Bool) <- return [Pure_M] b in
                                                       var_12 var_13 in
                                   return [Pure_M] unit;

impureFun : Float -> Float -> Impure_M Unit =
  \(a : Float) -> \(b : Float) -> let (_ : Bool -> Pure_M Unit) <- let (var_14 : Int -> Bool -> Pure_M Unit) <- return [Impure_M] pureFun in
                                                                     let (var_15 : Int) <- return [Impure_M] 1 in
                                                                       return [Impure_M] var_14 var_15 in
                                    return [Impure_M] unit;

