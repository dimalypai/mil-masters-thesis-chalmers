type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s : String) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] Empty_Str;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b : Bool) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] True;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f : Float) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (var_0 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] intId in
  let (var_3 : Int) <-
    let (var_1 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] intId in
    let (var_2 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1 in
    var_1 var_2 in
  let (var_4 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] intImpureId in
  let (var_7 : Int) <-
    let (var_5 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] intImpureId in
    let (var_6 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1 in
    var_5 var_6 in
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

intId : Int -> (Error Unit ::: NonTerm) Int =
  \(a : Int) -> return [Error Unit ::: NonTerm] a;

intImpureId : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  \(a : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] a;

pureFunParam : (Int -> (Error Unit ::: NonTerm) Int) -> (Error Unit ::: (NonTerm ::: (State ::: IO))) (Int -> (Error Unit ::: NonTerm) Int) =
  \(f : Int -> (Error Unit ::: NonTerm) Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] f;

pureFunParamPureOnTop : (Int -> (Error Unit ::: NonTerm) Int) -> (Error Unit ::: NonTerm) (Int -> (Error Unit ::: NonTerm) Int) =
  \(f : Int -> (Error Unit ::: NonTerm) Int) -> return [Error Unit ::: NonTerm] f;

impureFunParam : (Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) -> (Error Unit ::: (NonTerm ::: (State ::: IO))) (Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) =
  \(f : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] f;

pureFun : Int -> Bool -> (Error Unit ::: NonTerm) Unit =
  \(a : Int) -> \(b : Bool) -> return [Error Unit ::: NonTerm] unit;

impureFun : Float -> Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(a : Float) -> \(b : Float) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

partialPure : (Error Unit ::: NonTerm) (Bool -> (Error Unit ::: NonTerm) Unit) =
  let (var_8 : Int -> Bool -> (Error Unit ::: NonTerm) Unit) <- return [Error Unit ::: NonTerm] pureFun in
  let (var_9 : Int) <- return [Error Unit ::: NonTerm] 1 in
  return [Error Unit ::: NonTerm] var_8 var_9;

partialImpure : (Error Unit ::: NonTerm) (Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) =
  let (var_10 : Float -> Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: NonTerm] impureFun in
  let (var_11 : Float) <- return [Error Unit ::: NonTerm] 1.0e-2 in
  return [Error Unit ::: NonTerm] var_10 var_11;

fullPure : (Error Unit ::: NonTerm) Unit =
  let (var_14 : Bool -> (Error Unit ::: NonTerm) Unit) <-
    let (var_12 : Int -> Bool -> (Error Unit ::: NonTerm) Unit) <- return [Error Unit ::: NonTerm] pureFun in
    let (var_13 : Int) <- return [Error Unit ::: NonTerm] 1 in
    return [Error Unit ::: NonTerm] var_12 var_13 in
  let (var_15 : Bool) <- return [Error Unit ::: NonTerm] True in
  var_14 var_15;

fullPureAndImpure : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (var_20 : Unit) <-
    let (var_18 : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <-
      let (var_16 : Float -> Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] impureFun in
      let (var_17 : Float) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0e-2 in
      return [Error Unit ::: (NonTerm ::: (State ::: IO))] var_16 var_17 in
    let (var_19 : Float) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2.0e-2 in
    var_18 var_19 in
  let (var_23 : Bool -> (Error Unit ::: NonTerm) Unit) <-
      let (var_21 : Int -> Bool -> (Error Unit ::: NonTerm) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] pureFun in
      let (var_22 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2 in
      return [Error Unit ::: (NonTerm ::: (State ::: IO))] var_21 var_22 in
  let (var_24 : Bool) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] False in
  var_23 var_24;

