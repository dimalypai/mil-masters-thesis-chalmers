type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s_ : String) ->
    case s_ of
      | Empty_Str => return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit
      | Cons_Str (c_ : Char) (cs_ : String) =>
          let (unit_0 : Unit) <- lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] print_char c_
          in printString cs_
    end;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] Empty_Str;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b_ : Bool) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] True;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i_ : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f_ : Float) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (var_0 : Int) <- globalPureFun in
  let (var_1 : Int) <- globalImpureFun in
  let (var_2 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] globalPureFunWithParams in
  let (var_3 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] globalImpureFunWithParams in
  let (var_6 : Int) <-
    let (var_4 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] globalPureFunWithParams in
    let (var_5 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1 in
    var_4 var_5 in
  let (var_9 : Int) <-
    let (var_7 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] globalImpureFunWithParams in
    let (var_8 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2 in
    var_7 var_8 in
  let (var_12 : Int) <-
    let (var_10 : (Int -> (Error Unit ::: NonTerm) Int) -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] withLocalPureFun in
    let (var_11 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] globalPureFunWithParams in
    var_10 var_11 in
  let (var_15 : Int) <-
    let (var_13 : (Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] withLocalImpureFun in
    let (var_14 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] globalImpureFunWithParams in
    var_13 var_14 in
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

globalPureFun : (Error Unit ::: NonTerm) Int =
  return [Error Unit ::: NonTerm] 1;

globalImpureFun : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2;

globalPureFunWithParams : Int -> (Error Unit ::: NonTerm) Int =
  \(a : Int) -> return [Error Unit ::: NonTerm] a;

globalImpureFunWithParams : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  \(a : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] a;

withLocalPureFun : (Int -> (Error Unit ::: NonTerm) Int) -> (Error Unit ::: NonTerm) Int =
  \(f : Int -> (Error Unit ::: NonTerm) Int) ->
    let (var_16 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: NonTerm] f in
    let (var_17 : Int -> (Error Unit ::: NonTerm) Int) <- return [Error Unit ::: NonTerm] f in
    let (var_18 : Int) <- return [Error Unit ::: NonTerm] 1 in
    var_17 var_18;

withLocalImpureFun : (Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  \(f : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) ->
    let (var_19 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] f in
    let (var_20 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] f in
    let (var_21 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2 in
    var_20 var_21;

