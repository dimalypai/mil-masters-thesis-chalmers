type Bool
  = True
  | False;

type Maybe A
  = Nothing
  | Just A;

alias Impure_M = Error Unit ::: State ::: Lift ::: IO ::: Id;

alias Super = {{Int}, {Super -> Unit -> Id Int, Super -> Id Bool}};

alias Child = {{Int, Float}, {Super -> Unit -> Id Int, Super -> Id Bool, Child -> Unit -> Id Int, Child -> Id Float}};

new_Super : Id Super =
  return [Id] {{1}, {method_Super, superMethod_Super}};

method_Super : Super -> Unit -> Id Int =
  \(self : Super) -> \(u : Unit) -> case self of
                                      | {self_fields, self_methods} =>
                                          case self_fields of
                                            | {self_superField} =>
                                                case self_methods of
                                                  | {self_method, self_superMethod} =>
                                                      return [Id] self_superField
                                                end
                                          end
                                    end;

superMethod_Super : Super -> Id Bool =
  \(self : Super) -> case self of
                       | {self_fields, self_methods} =>
                           case self_fields of
                             | {self_superField} =>
                                 case self_methods of
                                   | {self_method, self_superMethod} =>
                                       return [Id] True
                                 end
                           end
                     end;

new_Child : Id Child =
  return [Id] {{1, 1.0e-2}, {method_Super, superMethod_Super, method_Child, childMethod_Child}};

method_Child : Child -> Unit -> Id Int =
  \(self : Child) -> \(u : Unit) -> case self of
                                      | {self_fields, self_methods} =>
                                          case self_fields of
                                            | {self_superField, self_childField} =>
                                                case self_methods of
                                                  | {super_method, self_superMethod, self_method, self_childMethod} =>
                                                      let (_ : Float) <- return [Id] self_childField in
                                                        return [Id] 2
                                                end
                                          end
                                    end;

childMethod_Child : Child -> Id Float =
  \(self : Child) -> case self of
                       | {self_fields, self_methods} =>
                           case self_fields of
                             | {self_superField, self_childField} =>
                                 case self_methods of
                                   | {super_method, self_superMethod, self_method, self_childMethod} =>
                                       let (_ : Bool) <- in self_superMethod self
                                         return [Id] self_childField
                                 end
                           end
                     end;

main : Impure_M Unit =
  let (objSuper : Super) <- lift [Id -> Impure_M] new_Super in
    let (objChild : Child) <- lift [Id -> Impure_M] new_Child in
      let (_ : Int) <- lift [Id -> Impure_M] fun objSuper in
        let (_ : Int) <- lift [Id -> Impure_M] fun objChild in
          return [Impure_M] unit;

fun : Super -> Id Int =
  \(obj : Super) -> case obj of
                      | {obj_fields, obj_methods} =>
                          case obj_fields of
                            | {obj_superField} =>
                                case obj_methods of
                                  | {obj_method obj_superMethod} =>
                                      return [Id] obj_method obj
                                end
                          end
                    end;

