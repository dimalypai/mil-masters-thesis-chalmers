type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (a1 : Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit in
  let (b : Bool) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] True in
  let (a2 : Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] a1 in
  let (c : Maybe Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] Nothing [Int] in
  let (d1 : Maybe Int) <-
    let (var_0 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2 in
    return [Error Unit ::: (NonTerm ::: (State ::: IO))] Just [Int] var_0 in
  let (d2 : Maybe Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] d1 in
  let (e1 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 3 in
  let (e2 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] e1 in
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

