type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (State ::: IO)) Unit =
  \(s_ : String) ->
    case s_ of
      | Empty_Str => return [Error Unit ::: (State ::: IO)] unit
      | Cons_Str (c_ : Char) (cs_ : String) =>
          let (unit_0 : Unit) <- lift [IO => Error Unit ::: (State ::: IO)] print_char c_
          in printString cs_
    end;

readString : (Error Unit ::: (State ::: IO)) String =
  readString_ Empty_Str;

readString_ : String -> (Error Unit ::: (State ::: IO)) String =
  \(acc_ : String) ->
    let (c_ : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
    in case c_ of
         | ' ' => return [Error Unit ::: (State ::: IO)] reverseString_ acc_ Empty_Str
         | _ => readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str => acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printBool : Bool -> (Error Unit ::: (State ::: IO)) Unit =
  \(b_ : Bool) ->
    case b_ of
      | True => printString (Cons_Str 't' (Cons_Str 'r' (Cons_Str 'u' (Cons_Str 'e' Empty_Str))))
      | False => printString (Cons_Str 'f' (Cons_Str 'a' (Cons_Str 'l' (Cons_Str 's' (Cons_Str 'e' Empty_Str)))))
    end;

readBool : (Error Unit ::: (State ::: IO)) Bool =
  let (c_1 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
  in case c_1 of
       | 't' =>
           let (c_2 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
           in case c_2 of
             | 'r' =>
                 let (c_3 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                 in case c_3 of
                   | 'u' =>
                       let (c_4 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                       in case c_4 of
                         | 'e' =>
                             let (c_5 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                             in case c_5 of
                               | ' ' => return [Error Unit ::: (State ::: IO)] True
                               | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                                      in return [Error Unit ::: (State ::: IO)] errRes_
                             end
                         | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                                in return [Error Unit ::: (State ::: IO)] errRes_
                       end
                   | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                          in return [Error Unit ::: (State ::: IO)] errRes_
                 end
             | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                    in return [Error Unit ::: (State ::: IO)] errRes_
           end
       | 'f' =>
           let (c_2 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
           in case c_2 of
             | 'a' =>
                 let (c_3 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                 in case c_3 of
                   | 'l' =>
                       let (c_4 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                       in case c_4 of
                         | 's' =>
                             let (c_5 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                             in case c_5 of
                               | 'e' =>
                                   let (c_6 : Char) <- lift [IO => Error Unit ::: (State ::: IO)] read_char
                                   in case c_6 of
                                        | ' ' => return [Error Unit ::: (State ::: IO)] False
                                        | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                                               in return [Error Unit ::: (State ::: IO)] errRes_
                                   end
                               | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                                      in return [Error Unit ::: (State ::: IO)] errRes_
                             end
                         | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                                in return [Error Unit ::: (State ::: IO)] errRes_
                       end
                   | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                          in return [Error Unit ::: (State ::: IO)] errRes_
                 end
             | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
                    in return [Error Unit ::: (State ::: IO)] errRes_
           end
       | _ => let (errRes_ : Bool) <- throw_error [Unit] [Bool] unit
              in return [Error Unit ::: (State ::: IO)] errRes_
     end;

printInt : Int -> (Error Unit ::: (State ::: IO)) Unit =
  \(i_ : Int) ->
    return [Error Unit ::: (State ::: IO)]
      unit;

readInt : (Error Unit ::: (State ::: IO)) Int =
  return [Error Unit ::: (State ::: IO)]
    1;

printFloat : Float -> (Error Unit ::: (State ::: IO)) Unit =
  \(f_ : Float) ->
    return [Error Unit ::: (State ::: IO)]
      unit;

readFloat : (Error Unit ::: (State ::: IO)) Float =
  return [Error Unit ::: (State ::: IO)]
    1.0;

main : (Error Unit ::: (State ::: IO)) Unit =
  let (a1 : Unit) <-
    return [Error Unit ::: (State ::: IO)]
      unit
  in let (b : Bool) <-
       return [Error Unit ::: (State ::: IO)]
         True
     in let (a2 : Unit) <-
          return [Error Unit ::: (State ::: IO)]
            a1
        in let (c : Maybe Int) <-
             return [Error Unit ::: (State ::: IO)]
               Nothing [Int]
           in let (d1 : Maybe Int) <-
                let (var_4 : Int) <-
                  return [Error Unit ::: (State ::: IO)]
                    2
                in return [Error Unit ::: (State ::: IO)]
                     Just [Int] var_4
              in let (d2 : Maybe Int) <-
                   return [Error Unit ::: (State ::: IO)]
                     d1
                 in let (e1 : Int) <-
                      return [Error Unit ::: (State ::: IO)]
                        3
                    in let (e2 : Int) <-
                         return [Error Unit ::: (State ::: IO)]
                           e1
                       in let (f : Maybe Bool) <-
                            return [Error Unit ::: (State ::: IO)]
                              Nothing [Bool]
                          in let (g : Maybe Int) <-
                               return [Error Unit ::: (State ::: IO)]
                                 Nothing [Int]
                             in let (h : Maybe (Maybe Bool)) <-
                                  return [Error Unit ::: (State ::: IO)]
                                    Nothing [Maybe Bool]
                                in let (i : Ref (Maybe Int)) <-
                                     let (var_3 : Maybe Int) <-
                                       return [Error Unit ::: (State ::: IO)]
                                         Nothing [Int]
                                     in lift [State => Error Unit ::: State] new_ref [Maybe Int] var_3
                                   in let (j1 : Ref (Maybe Int)) <-
                                        let (var_2 : Maybe Int) <-
                                          let (var_1 : Int) <-
                                            return [Error Unit ::: (State ::: IO)]
                                              1
                                          in return [Error Unit ::: (State ::: IO)]
                                               Just [Int] var_1
                                        in lift [State => Error Unit ::: State] new_ref [Maybe Int] var_2
                                      in let (j2 : Ref (Maybe Int)) <-
                                           return [Error Unit ::: (State ::: IO)]
                                             j1
                                         in let (k1 : Ref Int) <-
                                              let (var_0 : Int) <-
                                                return [Error Unit ::: (State ::: IO)]
                                                  2
                                              in lift [State => Error Unit ::: State] new_ref [Int] var_0
                                            in let (k2 : Ref Int) <-
                                                 return [Error Unit ::: (State ::: IO)]
                                                   k1
                                               in return [Error Unit ::: (State ::: IO)]
                                                    unit;

