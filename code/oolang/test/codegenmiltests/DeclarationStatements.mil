type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s : String) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] Empty_Str;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b : Bool) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] True;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f : Float) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (a1 : Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit in
  let (b : Bool) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] True in
  let (a2 : Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] a1 in
  let (c : Maybe Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] Nothing [Int] in
  let (d1 : Maybe Int) <-
    let (var_0 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 2 in
    return [Error Unit ::: (NonTerm ::: (State ::: IO))] Just [Int] var_0 in
  let (d2 : Maybe Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] d1 in
  let (e1 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 3 in
  let (e2 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] e1 in
  let (f : Maybe Bool) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] Nothing [Bool] in
  let (g : Maybe Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] Nothing [Int] in
  let (h : Maybe (Maybe Bool)) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] Nothing [Maybe Bool] in
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

