type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s_ : String) ->
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      unit;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    Empty_Str;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b_ : Bool) ->
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      unit;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    True;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i_ : Int) ->
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f_ : Float) ->
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (a : Int) <-
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      0
  in let (a_1 : Int) <-
       return [Error Unit ::: (NonTerm ::: (State ::: IO))]
         1
     in let (var_0 : Int) <-
          return [Error Unit ::: (NonTerm ::: (State ::: IO))]
            a_1
        in let (r : Ref Int) <-
             let (var_3 : Int) <-
               return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                 0
             in lift [State => Error Unit ::: (NonTerm ::: State)] new_ref [Int] var_3
           in let (var_2 : Unit) <-
                let (var_1 : Int) <-
                  return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                    1
                in lift [State => Error Unit ::: (NonTerm ::: State)] write_ref [Int] r var_1
              in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
                   unit;

f : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (a : Int) <-
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      2
  in let (a_1 : Int) <-
       return [Error Unit ::: (NonTerm ::: (State ::: IO))]
         3
     in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
          unit;

g : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (a : Int) <-
    return [Error Unit ::: (NonTerm ::: (State ::: IO))]
      4
  in let (a_1 : Int) <-
       return [Error Unit ::: (NonTerm ::: (State ::: IO))]
         5
     in let (var_4 : Int) <-
          return [Error Unit ::: (NonTerm ::: (State ::: IO))]
            a_1
        in return [Error Unit ::: (NonTerm ::: (State ::: IO))]
             unit;

