type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s_ : String) ->
    case s_ of
      | Empty_Str => return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit
      | Cons_Str (c_ : Char) (cs_ : String) =>
          let (unit_0 : Unit) <- lift [IO => Error Unit ::: (NonTerm ::: (State ::: IO))] print_char c_
          in printString cs_
    end;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] Empty_Str;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b_ : Bool) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] True;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i_ : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f_ : Float) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (var_0 : Int) <- intFun in
  let (var_1 : Int) <- intPureFun in
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

intFun : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  intPureFun;

intPureFun : (Error Unit ::: NonTerm) Int =
  return [Error Unit ::: NonTerm] 1;

severalLitsImpure : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (var_2 : Float) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0e-2 in
  let (var_3 : Bool) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] True in
  let (var_4 : String) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))]
    Cons_Str 's' (Cons_Str 't' (Cons_Str 'r' (Cons_Str 'i' (Cons_Str 'n' (Cons_Str 'g' Empty_Str))))) in
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

severalLitsPure : (Error Unit ::: NonTerm) (Maybe Int) =
  let (var_5 : Int) <- return [Error Unit ::: NonTerm] 1 in
  let (var_6 : Bool) <- return [Error Unit ::: NonTerm] False in
  return [Error Unit ::: NonTerm] Nothing [Int];

