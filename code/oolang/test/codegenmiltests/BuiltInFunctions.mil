type Maybe A
  = Nothing
  | Just A;

type String
  = Empty_Str
  | Cons_Str Char String;

printString : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(s : String) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readString : (Error Unit ::: (NonTerm ::: (State ::: IO))) String =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] Empty_Str;

printBool : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(b : Bool) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readBool : (Error Unit ::: (NonTerm ::: (State ::: IO))) Bool =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] True;

printInt : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(i : Int) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readInt : (Error Unit ::: (NonTerm ::: (State ::: IO))) Int =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1;

printFloat : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  \(f : Float) -> return [Error Unit ::: (NonTerm ::: (State ::: IO))] unit;

readFloat : (Error Unit ::: (NonTerm ::: (State ::: IO))) Float =
  return [Error Unit ::: (NonTerm ::: (State ::: IO))] 1.0;

main : (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit =
  let (s : String) <- readString in
  let (var_0 : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printString in
  let (var_3 : Unit) <-
    let (var_1 : String -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printString in
    let (var_2 : String) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] s in
    var_1 var_2 in
  let (b : Bool) <- readBool in
  let (var_4 : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printBool in
  let (var_7 : Unit) <-
    let (var_5 : Bool -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printBool in
    let (var_6 : Bool) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] b in
    var_5 var_6 in
  let (i : Int) <- readInt in
  let (var_8 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printInt in
  let (var_11 : Unit) <-
    let (var_9 : Int -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printInt in
    let (var_10 : Int) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] i in
    var_9 var_10 in
  let (f : Float) <- readFloat in
  let (var_12 : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printFloat in
  let (var_13 : Float -> (Error Unit ::: (NonTerm ::: (State ::: IO))) Unit) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] printFloat in
  let (var_14 : Float) <- return [Error Unit ::: (NonTerm ::: (State ::: IO))] f in
  var_13 var_14;

