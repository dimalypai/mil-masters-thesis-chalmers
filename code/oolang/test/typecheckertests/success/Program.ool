def main : Unit => unit; end

class A => end

class B < A => end

# Class params, pure, int literal, parens
def fun : {a : A} -> {b : A -> B} -> Pure Int =>
  ((1));
end

# Param reference, pure, the same param name as in fun
def paramRefPure : {a : Int} -> Pure Int =>
  a;
end

# Calling global function without params, impure
def mainCall : Unit =>
  main;
end

# Function for applications, pure
def curryFun : {a : Int} -> {b : Float} -> Pure Unit =>
  unit;
end

# Partial application of curryFun, pure
def curryFunPartialApp : Float -> Pure Unit =>
  curryFun 1;
end

# Final application of curryFun via curryFunPartialApp, pure
def curryFunFinalApp : Pure Unit =>
  curryFunPartialApp 0.01;
end

# Application of curryFun at once, nested pure application
# Declared as impure, but it is pure
def curryFunAtOnce : Unit =>
  curryFun (paramRefPure 1) 0.01;
end

# Pure function as parameter, pure
def pureFunPureParam : {f : Int -> Float -> Pure Unit} -> Pure Unit =>
  f 1 0.01;
end

# Impure function as parameter, partial application as return value, impure
def impureFunPartialAppReturn : {f : Int -> Float -> Unit} -> Float -> Unit =>
  f 1;
end

# Impure function as parameter, partial application, pure
def impureFunPartialAppPure : {f : Int -> Float -> Unit} -> Pure Int =>
  f 1;
  1;
end

# Impure function as parameter, full application, impure
def impureFunParamFullApp : {f : Int -> Float -> Unit} -> Int =>
  f 1 0.01;
  1;
end

# Impure function to be referenced globally from pure
def globalImpure : {a : Int} -> {b : Float} -> Unit =>
  unit;
end

# Pure function that partially applies global impure function
# and then calls pure function
def purePartialAppGlobalImpure : Pure Unit =>
  globalImpure 1;
  curryFunFinalApp;
end

def immutablePureDecl : Pure Unit =>
  x : Int = 1;
  y : Int;
end

def mutablePureDecl : Pure Unit =>
  x : Mutable Int <- 1;
  y : Mutable Int;
end

def immutableImpureDecl : Unit =>
  x : Unit = main;
end

def mutableImpureDecl : Unit =>
  x : Mutable Unit <- main;
end

