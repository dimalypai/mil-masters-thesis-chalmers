type String
  = Empty_Str
  | Cons_Str Char String;

type Pair A B
  = MkPair A B;

con_True : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    True;

con_False : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    False;

printString : (State ::: (Error Unit ::: NonTerm)) (String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(s_ : String) ->
      case s_ of
        | Empty_Str =>
            return [State ::: (Error Unit ::: (NonTerm ::: IO))]
              unit
        | Cons_Str (c_ : Char) (cs_ : String) =>
            let (unit_0 : Unit) <-
              lift [IO => State ::: (Error Unit ::: (NonTerm ::: IO))] print_char c_
            in let (printString_ : String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) <-
                 printString
               in printString_ cs_
      end;

readString : (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  readString_ Empty_Str;

readString_ : String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  \(acc_ : String) ->
    let (c_ : Char) <-
      lift [IO => State ::: (Error Unit ::: (NonTerm ::: IO))] read_char
    in case c_ of
         | ' ' =>
             return [State ::: (Error Unit ::: (NonTerm ::: IO))]
               reverseString_ acc_ Empty_Str
         | _ =>
             readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str =>
            acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printInt : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(i_ : Int) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readInt : (State ::: (Error Unit ::: (NonTerm ::: IO))) Int =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1;

printFloat : (State ::: (Error Unit ::: NonTerm)) (Float -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f_ : Float) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readFloat : (State ::: (Error Unit ::: (NonTerm ::: IO))) Float =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1.0;

evalState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) A_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) <-
                       sa
                     in sa_f state_;

execState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) S_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) <-
                       sa
                     in let (res : A_) <-
                          sa_f state_
                        in read_ref [S_] state_;

get : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) S_)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_ : Ref S_) ->
          read_ref [S_] state_;

put : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_value : S_) ->
          return [State ::: (Error Unit ::: NonTerm)]
            \(state_ : Ref S_) ->
              let (unit_var : Unit) <-
                write_ref [S_] state_ state_value
              in return [State ::: (Error Unit ::: NonTerm)]
                   unit;

modify : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) ((S_ -> (State ::: (Error Unit ::: NonTerm)) S_) -> (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_function : S_ -> (State ::: (Error Unit ::: NonTerm)) S_) ->
          return [State ::: (Error Unit ::: NonTerm)]
            \(state_ : Ref S_) ->
              let (state_value : S_) <-
                read_ref [S_] state_
              in let (new_state_value : S_) <-
                   state_function state_value
                 in write_ref [S_] state_ state_value;

con_MkPair : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair A B))))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\A .
      return [State ::: (Error Unit ::: NonTerm)]
        /\B .
          return [State ::: (Error Unit ::: NonTerm)]
            \(var_0 : A) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(var_1 : B) ->
                  return [State ::: (Error Unit ::: NonTerm)]
                    MkPair [A] [B] var_0 var_1;

main : (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    unit;

fun : (State ::: (Error Unit ::: NonTerm)) (Pair Int Unit) =
  let (var_7 : Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) (Pair Int Unit))) <-
    let (var_3 : forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair A B))))) <-
      con_MkPair
    in let (var_5 : forall B . (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair Int B)))) <-
         var_3 [Int]
       in var_5 [Unit]
  in let (var_16 : Unit -> (State ::: (Error Unit ::: NonTerm)) (Pair Int Unit)) <-
       var_7 1
     in let (var_13 : Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) <-
          let (var_10 : Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Unit)) <-
            lambdaFun
          in var_10 1
        in let (var_17 : Unit) <-
             var_13 unit
           in var_16 var_17;

lambdaFun : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Unit)) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(x : Int) ->
      return [State ::: (Error Unit ::: NonTerm)]
        \(y : Unit) ->
          return [State ::: (Error Unit ::: NonTerm)]
            y;

