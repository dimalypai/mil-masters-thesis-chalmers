type String
  = Empty_Str
  | Cons_Str Char String;

type Pair A B
  = MkPair A B;

con_True : (State ::: Error Unit) Bool =
  return [State ::: Error Unit]
    True;

con_False : (State ::: Error Unit) Bool =
  return [State ::: Error Unit]
    False;

printString : (State ::: Error Unit) (String -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(s_ : String) ->
      case s_ of
        | Empty_Str =>
            return [State ::: (Error Unit ::: IO)]
              unit
        | Cons_Str (c_ : Char) (cs_ : String) =>
            let (unit_0 : Unit) <-
              lift [IO => State ::: (Error Unit ::: IO)] print_char c_
            in let (printString_ : String -> (State ::: (Error Unit ::: IO)) Unit) <-
                 printString
               in printString_ cs_
      end;

readString : (State ::: (Error Unit ::: IO)) String =
  readString_ Empty_Str;

readString_ : String -> (State ::: (Error Unit ::: IO)) String =
  \(acc_ : String) ->
    let (c_ : Char) <-
      lift [IO => State ::: (Error Unit ::: IO)] read_char
    in case c_ of
         | ' ' =>
             return [State ::: (Error Unit ::: IO)]
               reverseString_ acc_ Empty_Str
         | _ =>
             readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str =>
            acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printInt : (State ::: Error Unit) (Int -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(i_ : Int) ->
      return [State ::: (Error Unit ::: IO)]
        unit;

readInt : (State ::: (Error Unit ::: IO)) Int =
  return [State ::: (Error Unit ::: IO)]
    1;

printFloat : (State ::: Error Unit) (Float -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(f_ : Float) ->
      return [State ::: (Error Unit ::: IO)]
        unit;

readFloat : (State ::: (Error Unit ::: IO)) Float =
  return [State ::: (Error Unit ::: IO)]
    1.0;

evalState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) A_)))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                       sa
                     in sa_f state_;

execState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) S_)))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                       sa
                     in let (res : A_) <-
                          sa_f state_
                        in read_ref [S_] state_;

get : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) S_)) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_ : Ref S_) ->
          read_ref [S_] state_;

put : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (S_ -> (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) Unit))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_value : S_) ->
          return [State ::: Error Unit]
            \(state_ : Ref S_) ->
              let (unit_var : Unit) <-
                write_ref [S_] state_ state_value
              in return [State ::: Error Unit]
                   unit;

modify : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) ((S_ -> (State ::: Error Unit) S_) -> (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) Unit))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_function : S_ -> (State ::: Error Unit) S_) ->
          return [State ::: Error Unit]
            \(state_ : Ref S_) ->
              let (state_value : S_) <-
                read_ref [S_] state_
              in let (new_state_value : S_) <-
                   state_function state_value
                 in write_ref [S_] state_ state_value;

con_MkPair : (State ::: Error Unit) (forall A . (State ::: Error Unit) (forall B . (State ::: Error Unit) (A -> (State ::: Error Unit) (B -> (State ::: Error Unit) (Pair A B))))) =
  return [State ::: Error Unit]
    /\A .
      return [State ::: Error Unit]
        /\B .
          return [State ::: Error Unit]
            \(var_0 : A) ->
              return [State ::: Error Unit]
                \(var_1 : B) ->
                  return [State ::: Error Unit]
                    MkPair [A] [B] var_0 var_1;

main : (State ::: (Error Unit ::: IO)) Unit =
  return [State ::: (Error Unit ::: IO)]
    unit;

fun : (State ::: Error Unit) (Pair Int Unit) =
  let (var_3 : forall A . (State ::: Error Unit) (forall B . (State ::: Error Unit) (A -> (State ::: Error Unit) (B -> (State ::: Error Unit) (Pair A B))))) <-
    con_MkPair
  in let (var_5 : forall B . (State ::: Error Unit) (Int -> (State ::: Error Unit) (B -> (State ::: Error Unit) (Pair Int B)))) <-
       var_3 [Int]
     in let (var_7 : Int -> (State ::: Error Unit) (Unit -> (State ::: Error Unit) (Pair Int Unit))) <-
          var_5 [Unit]
        in let (var_16 : Unit -> (State ::: Error Unit) (Pair Int Unit)) <-
             var_7 1
           in let (var_10 : Int -> (State ::: Error Unit) (Unit -> (State ::: Error Unit) Unit)) <-
                lambdaFun
              in let (var_13 : Unit -> (State ::: Error Unit) Unit) <-
                   var_10 1
                 in let (var_17 : Unit) <-
                      var_13 unit
                    in var_16 var_17;

lambdaFun : (State ::: Error Unit) (Int -> (State ::: Error Unit) (Unit -> (State ::: Error Unit) Unit)) =
  return [State ::: Error Unit]
    \(x : Int) ->
      return [State ::: Error Unit]
        \(y : Unit) ->
          return [State ::: Error Unit]
            y;

