type String
  = Empty_Str
  | Cons_Str Char String;

con_True : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    True;

con_False : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    False;

printString : (State ::: (Error Unit ::: NonTerm)) (String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(s : String) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readString : (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    Empty_Str;

printInt : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(i : Int) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readInt : (State ::: (Error Unit ::: (NonTerm ::: IO))) Int =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1;

printFloat : (State ::: (Error Unit ::: NonTerm)) (Float -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f : Float) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readFloat : (State ::: (Error Unit ::: (NonTerm ::: IO))) Float =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1.0;

evalState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) A_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in sa state_;

execState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) S_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       sa state_
                     in read_ref [S_] state_;

get : (State ::: (Error Unit ::: NonTerm)) (forall S_ . Ref S_ -> (State ::: (Error Unit ::: NonTerm)) S_) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      \(state_ : Ref S_) ->
        let (state_value : S_) <-
          read_ref [S_] state_
        in return [State ::: (Error Unit ::: NonTerm)]
             state_value;

put : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (S_ -> Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_value : S_) ->
          \(state_ : Ref S_) ->
            let (unit_var : Unit) <-
              write_ref [S_] state_ state_value
            in return [State ::: (Error Unit ::: NonTerm)]
                 unit;

modify : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) ((S_ -> (State ::: (Error Unit ::: NonTerm)) S_) -> Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_function : S_ -> (State ::: (Error Unit ::: NonTerm)) S_) ->
          \(state_ : Ref S_) ->
            let (state_value : S_) <-
              read_ref [S_] state_
            in let (new_state_value : S_) <-
                 state_function state_value
               in write_ref [S_] state_ state_value;

main : (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit =
  let (var_0 : Unit) <-
    return [State ::: (Error Unit ::: (NonTerm ::: IO))]
      unit
  in return [State ::: (Error Unit ::: (NonTerm ::: IO))]
       var_0;

unitId : (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(a : Unit) ->
      return [State ::: (Error Unit ::: NonTerm)]
        a;

multParamsFun : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Float)) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(x : Int) ->
      return [State ::: (Error Unit ::: NonTerm)]
        \(y : Unit) ->
          return [State ::: (Error Unit ::: NonTerm)]
            1.0;

multParamsFunNested : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Float)) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(x : Int) ->
      return [State ::: (Error Unit ::: NonTerm)]
        \(y : Unit) ->
          return [State ::: (Error Unit ::: NonTerm)]
            2.0;

simpleApp : (State ::: (Error Unit ::: NonTerm)) Unit =
  let (var_1 : Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) <-
    unitId
  in let (var_2 : Unit) <-
       return [State ::: (Error Unit ::: NonTerm)]
         unit
     in var_1 var_2;

partialApp : (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Float) =
  let (var_3 : Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Float)) <-
    multParamsFun
  in let (var_4 : Int) <-
       return [State ::: (Error Unit ::: NonTerm)]
         1
     in var_3 var_4;

fullApp : (State ::: (Error Unit ::: NonTerm)) Float =
  let (var_7 : Unit -> (State ::: (Error Unit ::: NonTerm)) Float) <-
    let (var_5 : Int -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Float)) <-
      multParamsFun
    in let (var_6 : Int) <-
         return [State ::: (Error Unit ::: NonTerm)]
           1
       in var_5 var_6
  in let (var_8 : Unit) <-
       return [State ::: (Error Unit ::: NonTerm)]
         unit
     in var_7 var_8;

higherOrderLambda : (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) =
  let (var_9 : (Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) -> (State ::: (Error Unit ::: NonTerm)) (Unit -> (State ::: (Error Unit ::: NonTerm)) Unit)) <-
    return [State ::: (Error Unit ::: NonTerm)]
      \(x : Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) ->
        return [State ::: (Error Unit ::: NonTerm)]
          x
  in let (var_10 : Unit -> (State ::: (Error Unit ::: NonTerm)) Unit) <-
       return [State ::: (Error Unit ::: NonTerm)]
         \(x : Unit) ->
           return [State ::: (Error Unit ::: NonTerm)]
             x
     in var_9 var_10;

ioFun : (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: (NonTerm ::: IO))) Int -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Int) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f : (State ::: (Error Unit ::: (NonTerm ::: IO))) Int) ->
      f;

stateFun : (State ::: (Error Unit ::: NonTerm)) ((Ref Int -> (State ::: (Error Unit ::: NonTerm)) Unit) -> Ref Int -> (State ::: (Error Unit ::: NonTerm)) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f : Ref Int -> (State ::: (Error Unit ::: NonTerm)) Unit) ->
      f;

