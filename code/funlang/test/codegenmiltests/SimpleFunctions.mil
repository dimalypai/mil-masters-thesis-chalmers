type String
  = Empty_Str
  | Cons_Str Char String;

con_True : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    True;

con_False : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    False;

printString : (State ::: (Error Unit ::: NonTerm)) (String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(s : String) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readString : (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    Empty_Str;

printInt : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(i : Int) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readInt : (State ::: (Error Unit ::: (NonTerm ::: IO))) Int =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1;

printFloat : (State ::: (Error Unit ::: NonTerm)) (Float -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f : Float) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readFloat : (State ::: (Error Unit ::: (NonTerm ::: IO))) Float =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1.0;

evalState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) A_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in sa state_;

execState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) S_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       sa state_
                     in read_ref [S_] state_;

get : (State ::: (Error Unit ::: NonTerm)) (forall S_ . Ref S_ -> (State ::: (Error Unit ::: NonTerm)) S_) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      \(state_ : Ref S_) ->
        let (state_value : S_) <-
          read_ref [S_] state_
        in return [State ::: (Error Unit ::: NonTerm)]
             state_value;

put : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (S_ -> Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_value : S_) ->
          \(state_ : Ref S_) ->
            let (unit_var : Unit) <-
              write_ref [S_] state_ state_value
            in return [State ::: (Error Unit ::: NonTerm)]
                 unit;

modify : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) ((S_ -> (State ::: (Error Unit ::: NonTerm)) S_) -> Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_function : S_ -> (State ::: (Error Unit ::: NonTerm)) S_) ->
          \(state_ : Ref S_) ->
            let (state_value : S_) <-
              read_ref [S_] state_
            in let (new_state_value : S_) <-
                 state_function state_value
               in write_ref [S_] state_ state_value;

main : (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit =
  let (var_0 : Unit) <-
    return [State ::: (Error Unit ::: (NonTerm ::: IO))]
      unit
  in return [State ::: (Error Unit ::: (NonTerm ::: IO))]
       var_0;

unitFun : (State ::: (Error Unit ::: NonTerm)) Unit =
  return [State ::: (Error Unit ::: NonTerm)]
    unit;

boolFun : (State ::: (Error Unit ::: NonTerm)) Bool =
  con_True;

intFun : (State ::: (Error Unit ::: NonTerm)) Int =
  return [State ::: (Error Unit ::: NonTerm)]
    1;

floatFun : (State ::: (Error Unit ::: NonTerm)) Float =
  return [State ::: (Error Unit ::: NonTerm)]
    1.0e-2;

stringFun : (State ::: (Error Unit ::: NonTerm)) String =
  return [State ::: (Error Unit ::: NonTerm)]
    Cons_Str 's' (Cons_Str 't' (Cons_Str 'r' (Cons_Str 'i' (Cons_Str 'n' (Cons_Str 'g' Empty_Str)))));

stateFun : (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) Bool) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(state_ : Ref Int) ->
      let (var_1 : Bool) <-
        con_False
      in return [State ::: (Error Unit ::: NonTerm)]
           var_1;

