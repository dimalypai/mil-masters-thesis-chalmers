type String
  = Empty_Str
  | Cons_Str Char String;

con_True : (Error Unit ::: NonTerm) Bool =
  return [Error Unit ::: NonTerm] True;

con_False : (Error Unit ::: NonTerm) Bool =
  return [Error Unit ::: NonTerm] False;

printString : (Error Unit ::: NonTerm) (String -> (Error Unit ::: (NonTerm ::: IO)) Unit) =
  return [Error Unit ::: NonTerm] \(s : String) ->
    return [Error Unit ::: (NonTerm ::: IO)] unit;

readString : (Error Unit ::: (NonTerm ::: IO)) String =
  return [Error Unit ::: (NonTerm ::: IO)] Empty_Str;

printInt : (Error Unit ::: NonTerm) (Int -> (Error Unit ::: (NonTerm ::: IO)) Unit) =
  return [Error Unit ::: NonTerm] \(i : Int) ->
    return [Error Unit ::: (NonTerm ::: IO)] unit;

readInt : (Error Unit ::: (NonTerm ::: IO)) Int =
  return [Error Unit ::: (NonTerm ::: IO)] 1;

printFloat : (Error Unit ::: NonTerm) (Float -> (Error Unit ::: (NonTerm ::: IO)) Unit) =
  return [Error Unit ::: NonTerm] \(f : Float) ->
    return [Error Unit ::: (NonTerm ::: IO)] unit;

readFloat : (Error Unit ::: (NonTerm ::: IO)) Float =
  return [Error Unit ::: (NonTerm ::: IO)] 1.0;

main : (Error Unit ::: (NonTerm ::: IO)) Unit =
  return [Error Unit ::: (NonTerm ::: IO)] unit;

unitFun : (Error Unit ::: NonTerm) Unit =
  return [Error Unit ::: NonTerm] unit;

boolFun : (Error Unit ::: NonTerm) Bool =
  con_True;

intFun : (Error Unit ::: NonTerm) Int =
  return [Error Unit ::: NonTerm] 1;

floatFun : (Error Unit ::: NonTerm) Float =
  return [Error Unit ::: NonTerm] 1.0e-2;

stringFun : (Error Unit ::: NonTerm) String =
  return [Error Unit ::: NonTerm] Cons_Str 's' (Cons_Str 't' (Cons_Str 'r' (Cons_Str 'i' (Cons_Str 'n' (Cons_Str 'g' Empty_Str)))));

stateFun : (Error Unit ::: (NonTerm ::: State)) Bool =
  con_False;

