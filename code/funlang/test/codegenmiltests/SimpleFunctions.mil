type String
  = Empty_Str
  | Cons_Str Char String;

type Pair A_ B_
  = MkPair A_ B_;

con_True : (State ::: Error Unit) Bool =
  return [State ::: Error Unit]
    True;

con_False : (State ::: Error Unit) Bool =
  return [State ::: Error Unit]
    False;

con_MkPair : (State ::: Error Unit) (forall A_ . (State ::: Error Unit) (forall B_ . (State ::: Error Unit) (A_ -> (State ::: Error Unit) (B_ -> (State ::: Error Unit) (Pair A_ B_))))) =
  return [State ::: Error Unit]
    /\A_ .
      return [State ::: Error Unit]
        /\B_ .
          return [State ::: Error Unit]
            \(a_ : A_) ->
              return [State ::: Error Unit]
                \(b_ : B_) ->
                  return [State ::: Error Unit]
                    MkPair [A_] [B_] a_ b_;

printString : (State ::: Error Unit) (String -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(s_ : String) ->
      case s_ of
        | Empty_Str => return [State ::: (Error Unit ::: IO)] unit
        | Cons_Str (c_ : Char) (cs_ : String) =>
            let (unit_0 : Unit) <- lift [IO => State ::: (Error Unit ::: IO)] print_char c_
            in let (printString_ : String -> (State ::: (Error Unit ::: IO)) Unit) <- printString
               in printString_ cs_
      end;

readString : (State ::: (Error Unit ::: IO)) String =
  readString_ Empty_Str;

readString_ : String -> (State ::: (Error Unit ::: IO)) String =
  \(acc_ : String) ->
    let (c_ : Char) <- lift [IO => State ::: (Error Unit ::: IO)] read_char
    in case c_ of
         | ' ' => return [State ::: (Error Unit ::: IO)] reverseString_ acc_ Empty_Str
         | _ => readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str => acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printInt : (State ::: Error Unit) (Int -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(i_ : Int) ->
      return [State ::: (Error Unit ::: IO)]
        unit;

readInt : (State ::: (Error Unit ::: IO)) Int =
  return [State ::: (Error Unit ::: IO)]
    1;

printFloat : (State ::: Error Unit) (Float -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(f_ : Float) ->
      return [State ::: (Error Unit ::: IO)]
        unit;

readFloat : (State ::: (Error Unit ::: IO)) Float =
  return [State ::: (Error Unit ::: IO)]
    1.0;

evalState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) A_)))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                       sa
                     in sa_f state_;

execState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) S_)))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                         sa
                       in sa_f state_
                     in read_ref [S_] state_;

runState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) (Pair A_ S_))))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                         sa
                       in sa_f state_
                     in let (new_state : S_) <-
                          read_ref [S_] state_
                        in return [State ::: Error Unit]
                             MkPair [A_] [S_] res new_state;

get : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) S_)) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_ : Ref S_) ->
          let (state_value : S_) <-
            read_ref [S_] state_
          in return [State ::: Error Unit]
               state_value;

put : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (S_ -> (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) Unit))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_value : S_) ->
          return [State ::: Error Unit]
            \(state_ : Ref S_) ->
              let (unit_var : Unit) <-
                write_ref [S_] state_ state_value
              in return [State ::: Error Unit]
                   unit;

modify : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) ((S_ -> (State ::: Error Unit) S_) -> (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) Unit))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_function : S_ -> (State ::: Error Unit) S_) ->
          return [State ::: Error Unit]
            \(state_ : Ref S_) ->
              let (state_value : S_) <-
                read_ref [S_] state_
              in let (new_state_value : S_) <-
                   state_function state_value
                 in write_ref [S_] state_ state_value;

main : (State ::: (Error Unit ::: IO)) Unit =
  let (var_0 : Unit) <-
    return [State ::: (Error Unit ::: IO)]
      unit
  in return [State ::: (Error Unit ::: IO)]
       var_0;

unitFun : (State ::: Error Unit) Unit =
  return [State ::: Error Unit]
    unit;

boolFun : (State ::: Error Unit) Bool =
  con_True;

intFun : (State ::: Error Unit) Int =
  return [State ::: Error Unit]
    1;

floatFun : (State ::: Error Unit) Float =
  return [State ::: Error Unit]
    1.0e-2;

stringFun : (State ::: Error Unit) String =
  return [State ::: Error Unit]
    Cons_Str 's' (Cons_Str 't' (Cons_Str 'r' (Cons_Str 'i' (Cons_Str 'n' (Cons_Str 'g' Empty_Str)))));

stateFun : (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) Bool) =
  return [State ::: Error Unit]
    \(state_ : Ref Int) ->
      let (var_1 : Bool) <-
        con_False
      in return [State ::: Error Unit]
           var_1;

