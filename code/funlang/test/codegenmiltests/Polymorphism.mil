type Pair A B
  = MkPair A B;

main : IO Unit =
  return [IO] unit;

mkPair : forall A . forall B . A -> B -> Pair A B =
  MkPair;

id : forall A . A -> A =
  /\A . \(x : A) -> x;

idInt : Int -> Int =
  id [Int];

idFun : (forall B . B -> B) -> (forall C . C -> C) =
  id [forall A . A -> A];

idFunApp : forall T . T -> T =
  idFun id;

typeAppsFun : Unit =
  (/\A . /\B . \(f : A -> B) -> \(x : A) -> f x) [Int] [Unit] (\(x : Int) -> unit) 1;

compose : forall A . forall B . forall C . (B -> C) -> (A -> B) -> A -> C =
  /\A . /\B . /\C . \(f : B -> C) -> \(g : A -> B) -> \(x : A) -> f (g x);

mkIntPair : Int -> Int -> Pair Int Int =
  MkPair [Int] [Int];

