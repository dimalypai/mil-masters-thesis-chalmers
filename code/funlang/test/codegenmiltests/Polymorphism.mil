type String
  = Empty_Str
  | Cons_Str Char String;

type Pair A B
  = MkPair A B;

con_True : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    True;

con_False : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    False;

printString : (State ::: (Error Unit ::: NonTerm)) (String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(s_ : String) ->
      case s_ of
        | Empty_Str => return [State ::: (Error Unit ::: (NonTerm ::: IO))] unit
        | Cons_Str (c_ : Char) (cs_ : String) =>
            let (unit_0 : Unit) <- lift [IO => State ::: (Error Unit ::: (NonTerm ::: IO))] print_char c_
            in let (printString_ : String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) <- printString
               in printString_ cs_
      end;

readString : (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  readString_ Empty_Str;

readString_ : String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  \(acc_ : String) ->
    let (c_ : Char) <- lift [IO => State ::: (Error Unit ::: (NonTerm ::: IO))] read_char
    in case c_ of
         | ' ' => return [State ::: (Error Unit ::: (NonTerm ::: IO))] reverseString_ acc_ Empty_Str
         | _ => readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str => acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printInt : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(i_ : Int) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readInt : (State ::: (Error Unit ::: (NonTerm ::: IO))) Int =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1;

printFloat : (State ::: (Error Unit ::: NonTerm)) (Float -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f_ : Float) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readFloat : (State ::: (Error Unit ::: (NonTerm ::: IO))) Float =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1.0;

evalState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) A_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) <-
                       sa
                     in sa_f state_;

execState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) S_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       let (sa_f : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) <-
                         sa
                       in sa_f state_
                     in read_ref [S_] state_;

get : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) S_)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_ : Ref S_) ->
          let (state_value : S_) <-
            read_ref [S_] state_
          in return [State ::: (Error Unit ::: NonTerm)]
               state_value;

put : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_value : S_) ->
          return [State ::: (Error Unit ::: NonTerm)]
            \(state_ : Ref S_) ->
              let (unit_var : Unit) <-
                write_ref [S_] state_ state_value
              in return [State ::: (Error Unit ::: NonTerm)]
                   unit;

modify : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) ((S_ -> (State ::: (Error Unit ::: NonTerm)) S_) -> (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_function : S_ -> (State ::: (Error Unit ::: NonTerm)) S_) ->
          return [State ::: (Error Unit ::: NonTerm)]
            \(state_ : Ref S_) ->
              let (state_value : S_) <-
                read_ref [S_] state_
              in let (new_state_value : S_) <-
                   state_function state_value
                 in write_ref [S_] state_ state_value;

con_MkPair : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair A B))))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\A .
      return [State ::: (Error Unit ::: NonTerm)]
        /\B .
          return [State ::: (Error Unit ::: NonTerm)]
            \(var_0 : A) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(var_1 : B) ->
                  return [State ::: (Error Unit ::: NonTerm)]
                    MkPair [A] [B] var_0 var_1;

main : (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit =
  let (var_2 : Unit) <-
    return [State ::: (Error Unit ::: (NonTerm ::: IO))]
      unit
  in return [State ::: (Error Unit ::: (NonTerm ::: IO))]
       var_2;

id : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) A)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\A .
      return [State ::: (Error Unit ::: NonTerm)]
        \(x : A) ->
          return [State ::: (Error Unit ::: NonTerm)]
            x;

idInt : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) Int) =
  let (var_3 : forall A . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) A)) <-
    id
  in var_3 [Int];

idFun : (State ::: (Error Unit ::: NonTerm)) ((forall B . (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) B)) -> (State ::: (Error Unit ::: NonTerm)) (forall C . (State ::: (Error Unit ::: NonTerm)) (C -> (State ::: (Error Unit ::: NonTerm)) C))) =
  let (var_5 : forall A . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) A)) <-
    id
  in var_5 [forall A . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) A)];

idFunApp : (State ::: (Error Unit ::: NonTerm)) (forall T . (State ::: (Error Unit ::: NonTerm)) (T -> (State ::: (Error Unit ::: NonTerm)) T)) =
  let (var_7 : (forall B . (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) B)) -> (State ::: (Error Unit ::: NonTerm)) (forall C . (State ::: (Error Unit ::: NonTerm)) (C -> (State ::: (Error Unit ::: NonTerm)) C))) <-
    idFun
  in let (var_8 : forall A . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) A)) <-
       id
     in var_7 var_8;

polyApp : (State ::: (Error Unit ::: NonTerm)) Unit =
  let (var_20 : Int -> (State ::: (Error Unit ::: NonTerm)) Unit) <-
    let (var_17 : (Int -> (State ::: (Error Unit ::: NonTerm)) Unit) -> (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) Unit)) <-
      let (var_15 : forall B . (State ::: (Error Unit ::: NonTerm)) ((Int -> (State ::: (Error Unit ::: NonTerm)) B) -> (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) B))) <-
        let (var_13 : forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) ((A -> (State ::: (Error Unit ::: NonTerm)) B) -> (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) B)))) <-
          return [State ::: (Error Unit ::: NonTerm)]
            /\A .
              return [State ::: (Error Unit ::: NonTerm)]
                /\B .
                  return [State ::: (Error Unit ::: NonTerm)]
                    \(f : A -> (State ::: (Error Unit ::: NonTerm)) B) ->
                      return [State ::: (Error Unit ::: NonTerm)]
                        \(x : A) ->
                          let (var_10 : A -> (State ::: (Error Unit ::: NonTerm)) B) <-
                            return [State ::: (Error Unit ::: NonTerm)]
                              f
                          in let (var_11 : A) <-
                               return [State ::: (Error Unit ::: NonTerm)]
                                 x
                             in var_10 var_11
        in var_13 [Int]
      in var_15 [Unit]
    in let (var_18 : Int -> (State ::: (Error Unit ::: NonTerm)) Unit) <-
         return [State ::: (Error Unit ::: NonTerm)]
           \(x : Int) ->
             return [State ::: (Error Unit ::: NonTerm)]
               unit
       in var_17 var_18
  in let (var_21 : Int) <-
       return [State ::: (Error Unit ::: NonTerm)]
         1
     in var_20 var_21;

compose : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (forall C . (State ::: (Error Unit ::: NonTerm)) ((B -> (State ::: (Error Unit ::: NonTerm)) C) -> (State ::: (Error Unit ::: NonTerm)) ((A -> (State ::: (Error Unit ::: NonTerm)) B) -> (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) C)))))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\A .
      return [State ::: (Error Unit ::: NonTerm)]
        /\B .
          return [State ::: (Error Unit ::: NonTerm)]
            /\C .
              return [State ::: (Error Unit ::: NonTerm)]
                \(f : B -> (State ::: (Error Unit ::: NonTerm)) C) ->
                  return [State ::: (Error Unit ::: NonTerm)]
                    \(g : A -> (State ::: (Error Unit ::: NonTerm)) B) ->
                      return [State ::: (Error Unit ::: NonTerm)]
                        \(x : A) ->
                          let (var_26 : B -> (State ::: (Error Unit ::: NonTerm)) C) <-
                            return [State ::: (Error Unit ::: NonTerm)]
                              f
                          in let (var_27 : B) <-
                               let (var_23 : A -> (State ::: (Error Unit ::: NonTerm)) B) <-
                                 return [State ::: (Error Unit ::: NonTerm)]
                                   g
                               in let (var_24 : A) <-
                                    return [State ::: (Error Unit ::: NonTerm)]
                                      x
                                  in var_23 var_24
                             in var_26 var_27;

mkIntPair : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (Pair Int Int))) =
  let (var_31 : forall B . (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair Int B)))) <-
    let (var_29 : forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair A B))))) <-
      con_MkPair
    in var_29 [Int]
  in var_31 [Int];

