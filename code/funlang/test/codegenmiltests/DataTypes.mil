type String
  = Empty_Str
  | Cons_Str Char String;

type Pair A_ B_
  = MkPair A_ B_;

type S
  = MkS;

type T
  = MkT (Int -> (State ::: Error Unit) Unit)
  | MkTT;

type IoWrapper A
  = MkIO ((State ::: (Error Unit ::: IO)) A);

type StateWrapper St A
  = MkState ((State ::: Error Unit) (Ref St -> (State ::: Error Unit) A));

type BuiltInMonadFunWrapper
  = IoFun (Unit -> (State ::: (Error Unit ::: IO)) Unit)
  | StateFun (Int -> (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) Unit));

type BuiltInMonadForAllWrapper
  = IoForAll (forall A . (State ::: (Error Unit ::: IO)) A)
  | StateForAll (forall A . (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) A));

con_True : (State ::: Error Unit) Bool =
  return [State ::: Error Unit]
    True;

con_False : (State ::: Error Unit) Bool =
  return [State ::: Error Unit]
    False;

con_MkPair : (State ::: Error Unit) (forall A_ . (State ::: Error Unit) (forall B_ . (State ::: Error Unit) (A_ -> (State ::: Error Unit) (B_ -> (State ::: Error Unit) (Pair A_ B_))))) =
  return [State ::: Error Unit]
    /\A_ .
      return [State ::: Error Unit]
        /\B_ .
          return [State ::: Error Unit]
            \(a_ : A_) ->
              return [State ::: Error Unit]
                \(b_ : B_) ->
                  return [State ::: Error Unit]
                    MkPair [A_] [B_] a_ b_;

printString : (State ::: Error Unit) (String -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(s_ : String) ->
      case s_ of
        | Empty_Str => return [State ::: (Error Unit ::: IO)] unit
        | Cons_Str (c_ : Char) (cs_ : String) =>
            let (unit_0 : Unit) <- lift [IO => State ::: (Error Unit ::: IO)] print_char c_
            in let (printString_ : String -> (State ::: (Error Unit ::: IO)) Unit) <- printString
               in printString_ cs_
      end;

readString : (State ::: (Error Unit ::: IO)) String =
  readString_ Empty_Str;

readString_ : String -> (State ::: (Error Unit ::: IO)) String =
  \(acc_ : String) ->
    let (c_ : Char) <- lift [IO => State ::: (Error Unit ::: IO)] read_char
    in case c_ of
         | ' ' => return [State ::: (Error Unit ::: IO)] reverseString_ acc_ Empty_Str
         | _ => readString_ (Cons_Str c_ acc_)
       end;

reverseString_ : String -> String -> String =
  \(s_ : String) ->
    \(acc_ : String) ->
      case s_ of
        | Empty_Str => acc_
        | Cons_Str (c_ : Char) (cs_ : String) =>
            reverseString_ cs_ (Cons_Str c_ acc_)
      end;

printInt : (State ::: Error Unit) (Int -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(i_ : Int) ->
      return [State ::: (Error Unit ::: IO)]
        unit;

readInt : (State ::: (Error Unit ::: IO)) Int =
  return [State ::: (Error Unit ::: IO)]
    1;

printFloat : (State ::: Error Unit) (Float -> (State ::: (Error Unit ::: IO)) Unit) =
  return [State ::: Error Unit]
    \(f_ : Float) ->
      return [State ::: (Error Unit ::: IO)]
        unit;

readFloat : (State ::: (Error Unit ::: IO)) Float =
  return [State ::: (Error Unit ::: IO)]
    1.0;

evalState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) A_)))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                       sa
                     in sa_f state_;

execState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) S_)))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                         sa
                       in sa_f state_
                     in read_ref [S_] state_;

runState : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (forall A_ . (State ::: Error Unit) ((State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_) -> (State ::: Error Unit) (S_ -> (State ::: Error Unit) (Pair A_ S_))))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        /\A_ .
          return [State ::: Error Unit]
            \(sa : (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) A_)) ->
              return [State ::: Error Unit]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       let (sa_f : Ref S_ -> (State ::: Error Unit) A_) <-
                         sa
                       in sa_f state_
                     in let (new_state : S_) <-
                          read_ref [S_] state_
                        in return [State ::: Error Unit]
                             MkPair [A_] [S_] res new_state;

get : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) S_)) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_ : Ref S_) ->
          let (state_value : S_) <-
            read_ref [S_] state_
          in return [State ::: Error Unit]
               state_value;

put : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) (S_ -> (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) Unit))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_value : S_) ->
          return [State ::: Error Unit]
            \(state_ : Ref S_) ->
              let (unit_var : Unit) <-
                write_ref [S_] state_ state_value
              in return [State ::: Error Unit]
                   unit;

modify : (State ::: Error Unit) (forall S_ . (State ::: Error Unit) ((S_ -> (State ::: Error Unit) S_) -> (State ::: Error Unit) (Ref S_ -> (State ::: Error Unit) Unit))) =
  return [State ::: Error Unit]
    /\S_ .
      return [State ::: Error Unit]
        \(state_function : S_ -> (State ::: Error Unit) S_) ->
          return [State ::: Error Unit]
            \(state_ : Ref S_) ->
              let (state_value : S_) <-
                read_ref [S_] state_
              in let (new_state_value : S_) <-
                   state_function state_value
                 in write_ref [S_] state_ state_value;

con_MkS : (State ::: Error Unit) S =
  return [State ::: Error Unit]
    MkS;

con_MkT : (State ::: Error Unit) ((Int -> (State ::: Error Unit) Unit) -> (State ::: Error Unit) T) =
  return [State ::: Error Unit]
    \(var_0 : Int -> (State ::: Error Unit) Unit) ->
      return [State ::: Error Unit]
        MkT var_0;

con_MkTT : (State ::: Error Unit) T =
  return [State ::: Error Unit]
    MkTT;

con_MkIO : (State ::: Error Unit) (forall A . (State ::: Error Unit) ((State ::: (Error Unit ::: IO)) A -> (State ::: Error Unit) (IoWrapper A))) =
  return [State ::: Error Unit]
    /\A .
      return [State ::: Error Unit]
        \(var_1 : (State ::: (Error Unit ::: IO)) A) ->
          return [State ::: Error Unit]
            MkIO [A] var_1;

con_MkState : (State ::: Error Unit) (forall St . (State ::: Error Unit) (forall A . (State ::: Error Unit) ((State ::: Error Unit) (Ref St -> (State ::: Error Unit) A) -> (State ::: Error Unit) (StateWrapper St A)))) =
  return [State ::: Error Unit]
    /\St .
      return [State ::: Error Unit]
        /\A .
          return [State ::: Error Unit]
            \(var_2 : (State ::: Error Unit) (Ref St -> (State ::: Error Unit) A)) ->
              return [State ::: Error Unit]
                MkState [St] [A] var_2;

con_IoFun : (State ::: Error Unit) ((Unit -> (State ::: (Error Unit ::: IO)) Unit) -> (State ::: Error Unit) BuiltInMonadFunWrapper) =
  return [State ::: Error Unit]
    \(var_3 : Unit -> (State ::: (Error Unit ::: IO)) Unit) ->
      return [State ::: Error Unit]
        IoFun var_3;

con_StateFun : (State ::: Error Unit) ((Int -> (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) Unit)) -> (State ::: Error Unit) BuiltInMonadFunWrapper) =
  return [State ::: Error Unit]
    \(var_4 : Int -> (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) Unit)) ->
      return [State ::: Error Unit]
        StateFun var_4;

con_IoForAll : (State ::: Error Unit) ((forall A . (State ::: (Error Unit ::: IO)) A) -> (State ::: Error Unit) BuiltInMonadForAllWrapper) =
  return [State ::: Error Unit]
    \(var_5 : forall A . (State ::: (Error Unit ::: IO)) A) ->
      return [State ::: Error Unit]
        IoForAll var_5;

con_StateForAll : (State ::: Error Unit) ((forall A . (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) A)) -> (State ::: Error Unit) BuiltInMonadForAllWrapper) =
  return [State ::: Error Unit]
    \(var_6 : forall A . (State ::: Error Unit) (Ref Int -> (State ::: Error Unit) A)) ->
      return [State ::: Error Unit]
        StateForAll var_6;

main : (State ::: (Error Unit ::: IO)) Unit =
  let (var_7 : Unit) <-
    return [State ::: (Error Unit ::: IO)]
      unit
  in return [State ::: (Error Unit ::: IO)]
       var_7;

mkS : (State ::: Error Unit) S =
  con_MkS;

mkT : (State ::: Error Unit) ((Int -> (State ::: Error Unit) Unit) -> (State ::: Error Unit) T) =
  con_MkT;

mkPair : (State ::: Error Unit) (forall A . (State ::: Error Unit) (forall B . (State ::: Error Unit) (A -> (State ::: Error Unit) (B -> (State ::: Error Unit) (Pair A B))))) =
  con_MkPair;

mkIo : (State ::: Error Unit) (forall A . (State ::: Error Unit) ((State ::: (Error Unit ::: IO)) A -> (State ::: Error Unit) (IoWrapper A))) =
  con_MkIO;

mkState : (State ::: Error Unit) (forall St . (State ::: Error Unit) (forall A . (State ::: Error Unit) ((State ::: Error Unit) (Ref St -> (State ::: Error Unit) A) -> (State ::: Error Unit) (StateWrapper St A)))) =
  con_MkState;

