type String
  = Empty_Str
  | Cons_Str Char String;

type S
  = MkS;

type T
  = MkT (Int -> (State ::: (Error Unit ::: NonTerm)) Unit)
  | MkTT;

type Pair A B
  = MkPair A B;

type IoWrapper A
  = MkIO ((State ::: (Error Unit ::: (NonTerm ::: IO))) A);

type StateWrapper St A
  = MkState ((State ::: (Error Unit ::: NonTerm)) (Ref St -> (State ::: (Error Unit ::: NonTerm)) A));

type BuiltInMonadFunWrapper
  = IoFun (Unit -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit)
  | StateFun (Int -> (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) Unit));

type BuiltInMonadForAllWrapper
  = IoForAll (forall A . (State ::: (Error Unit ::: (NonTerm ::: IO))) A)
  | StateForAll (forall A . (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) A));

con_True : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    True;

con_False : (State ::: (Error Unit ::: NonTerm)) Bool =
  return [State ::: (Error Unit ::: NonTerm)]
    False;

printString : (State ::: (Error Unit ::: NonTerm)) (String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(s_ : String) ->
      case s_ of
        | Empty_Str => return [State ::: (Error Unit ::: (NonTerm ::: IO))] unit
        | Cons_Str (c_ : Char) (cs_ : String) =>
            let (unit_0 : Unit) <- lift [IO => State ::: (Error Unit ::: (NonTerm ::: IO))] print_char c_
            in let (printString_ : String -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) <- printString
               in printString_ cs_
      end;

readString : (State ::: (Error Unit ::: (NonTerm ::: IO))) String =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    Empty_Str;

printInt : (State ::: (Error Unit ::: NonTerm)) (Int -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(i_ : Int) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readInt : (State ::: (Error Unit ::: (NonTerm ::: IO))) Int =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1;

printFloat : (State ::: (Error Unit ::: NonTerm)) (Float -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(f_ : Float) ->
      return [State ::: (Error Unit ::: (NonTerm ::: IO))]
        unit;

readFloat : (State ::: (Error Unit ::: (NonTerm ::: IO))) Float =
  return [State ::: (Error Unit ::: (NonTerm ::: IO))]
    1.0;

evalState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) A_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (sa_f : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) <-
                       sa
                     in sa_f state_;

execState : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (forall A_ . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) -> (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) S_)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A_ .
          return [State ::: (Error Unit ::: NonTerm)]
            \(sa : (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(s : S_) ->
                  let (state_ : Ref S_) <-
                    new_ref [S_] s
                  in let (res : A_) <-
                       let (sa_f : Ref S_ -> (State ::: (Error Unit ::: NonTerm)) A_) <-
                         sa
                       in sa_f state_
                     in read_ref [S_] state_;

get : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) S_)) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_ : Ref S_) ->
          let (state_value : S_) <-
            read_ref [S_] state_
          in return [State ::: (Error Unit ::: NonTerm)]
               state_value;

put : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) (S_ -> (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_value : S_) ->
          return [State ::: (Error Unit ::: NonTerm)]
            \(state_ : Ref S_) ->
              let (unit_var : Unit) <-
                write_ref [S_] state_ state_value
              in return [State ::: (Error Unit ::: NonTerm)]
                   unit;

modify : (State ::: (Error Unit ::: NonTerm)) (forall S_ . (State ::: (Error Unit ::: NonTerm)) ((S_ -> (State ::: (Error Unit ::: NonTerm)) S_) -> (State ::: (Error Unit ::: NonTerm)) (Ref S_ -> (State ::: (Error Unit ::: NonTerm)) Unit))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\S_ .
      return [State ::: (Error Unit ::: NonTerm)]
        \(state_function : S_ -> (State ::: (Error Unit ::: NonTerm)) S_) ->
          return [State ::: (Error Unit ::: NonTerm)]
            \(state_ : Ref S_) ->
              let (state_value : S_) <-
                read_ref [S_] state_
              in let (new_state_value : S_) <-
                   state_function state_value
                 in write_ref [S_] state_ state_value;

con_MkS : (State ::: (Error Unit ::: NonTerm)) S =
  return [State ::: (Error Unit ::: NonTerm)]
    MkS;

con_MkT : (State ::: (Error Unit ::: NonTerm)) ((Int -> (State ::: (Error Unit ::: NonTerm)) Unit) -> (State ::: (Error Unit ::: NonTerm)) T) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(var_0 : Int -> (State ::: (Error Unit ::: NonTerm)) Unit) ->
      return [State ::: (Error Unit ::: NonTerm)]
        MkT var_0;

con_MkTT : (State ::: (Error Unit ::: NonTerm)) T =
  return [State ::: (Error Unit ::: NonTerm)]
    MkTT;

con_MkPair : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair A B))))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\A .
      return [State ::: (Error Unit ::: NonTerm)]
        /\B .
          return [State ::: (Error Unit ::: NonTerm)]
            \(var_1 : A) ->
              return [State ::: (Error Unit ::: NonTerm)]
                \(var_2 : B) ->
                  return [State ::: (Error Unit ::: NonTerm)]
                    MkPair [A] [B] var_1 var_2;

con_MkIO : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: (NonTerm ::: IO))) A -> (State ::: (Error Unit ::: NonTerm)) (IoWrapper A))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\A .
      return [State ::: (Error Unit ::: NonTerm)]
        \(var_3 : (State ::: (Error Unit ::: (NonTerm ::: IO))) A) ->
          return [State ::: (Error Unit ::: NonTerm)]
            MkIO [A] var_3;

con_MkState : (State ::: (Error Unit ::: NonTerm)) (forall St . (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref St -> (State ::: (Error Unit ::: NonTerm)) A) -> (State ::: (Error Unit ::: NonTerm)) (StateWrapper St A)))) =
  return [State ::: (Error Unit ::: NonTerm)]
    /\St .
      return [State ::: (Error Unit ::: NonTerm)]
        /\A .
          return [State ::: (Error Unit ::: NonTerm)]
            \(var_4 : (State ::: (Error Unit ::: NonTerm)) (Ref St -> (State ::: (Error Unit ::: NonTerm)) A)) ->
              return [State ::: (Error Unit ::: NonTerm)]
                MkState [St] [A] var_4;

con_IoFun : (State ::: (Error Unit ::: NonTerm)) ((Unit -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) -> (State ::: (Error Unit ::: NonTerm)) BuiltInMonadFunWrapper) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(var_5 : Unit -> (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit) ->
      return [State ::: (Error Unit ::: NonTerm)]
        IoFun var_5;

con_StateFun : (State ::: (Error Unit ::: NonTerm)) ((Int -> (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) Unit)) -> (State ::: (Error Unit ::: NonTerm)) BuiltInMonadFunWrapper) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(var_6 : Int -> (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) Unit)) ->
      return [State ::: (Error Unit ::: NonTerm)]
        StateFun var_6;

con_IoForAll : (State ::: (Error Unit ::: NonTerm)) ((forall A . (State ::: (Error Unit ::: (NonTerm ::: IO))) A) -> (State ::: (Error Unit ::: NonTerm)) BuiltInMonadForAllWrapper) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(var_7 : forall A . (State ::: (Error Unit ::: (NonTerm ::: IO))) A) ->
      return [State ::: (Error Unit ::: NonTerm)]
        IoForAll var_7;

con_StateForAll : (State ::: (Error Unit ::: NonTerm)) ((forall A . (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) A)) -> (State ::: (Error Unit ::: NonTerm)) BuiltInMonadForAllWrapper) =
  return [State ::: (Error Unit ::: NonTerm)]
    \(var_8 : forall A . (State ::: (Error Unit ::: NonTerm)) (Ref Int -> (State ::: (Error Unit ::: NonTerm)) A)) ->
      return [State ::: (Error Unit ::: NonTerm)]
        StateForAll var_8;

main : (State ::: (Error Unit ::: (NonTerm ::: IO))) Unit =
  let (var_9 : Unit) <-
    return [State ::: (Error Unit ::: (NonTerm ::: IO))]
      unit
  in return [State ::: (Error Unit ::: (NonTerm ::: IO))]
       var_9;

mkS : (State ::: (Error Unit ::: NonTerm)) S =
  con_MkS;

mkT : (State ::: (Error Unit ::: NonTerm)) ((Int -> (State ::: (Error Unit ::: NonTerm)) Unit) -> (State ::: (Error Unit ::: NonTerm)) T) =
  con_MkT;

mkPair : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) (forall B . (State ::: (Error Unit ::: NonTerm)) (A -> (State ::: (Error Unit ::: NonTerm)) (B -> (State ::: (Error Unit ::: NonTerm)) (Pair A B))))) =
  con_MkPair;

mkIo : (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: (NonTerm ::: IO))) A -> (State ::: (Error Unit ::: NonTerm)) (IoWrapper A))) =
  con_MkIO;

mkState : (State ::: (Error Unit ::: NonTerm)) (forall St . (State ::: (Error Unit ::: NonTerm)) (forall A . (State ::: (Error Unit ::: NonTerm)) ((State ::: (Error Unit ::: NonTerm)) (Ref St -> (State ::: (Error Unit ::: NonTerm)) A) -> (State ::: (Error Unit ::: NonTerm)) (StateWrapper St A)))) =
  con_MkState;

