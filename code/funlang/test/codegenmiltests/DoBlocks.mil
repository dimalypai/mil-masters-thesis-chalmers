main : (IO ::: Id) Unit =
  let (_ : Unit) <- printString "Hello from main" in
    let (i : Int) <- readInt in
      let (_ : Unit) <- printInt i in
        let (f : Float) <- readFloat in
          let (_ : Unit) <- printFloat f in
            let (v : Int) <- lift [Id -> IO ::: Id] execState [Int] [Unit] stateManip 1 in
              let (_ : Unit) <- printInt v in
                lift [Id -> IO ::: Id] evalState [Int] [Unit] stateManip 0;

stateManip : Int -> Id {Unit, Int} =
  \(state1 : Int) -> let (get_res : {Int, Int}) <- stateManip_get state1 [Int] in
                       case get_res of
                         | {a1 : Int, state2 : Int} =>
                             let (put_res : {Unit, Int}) <- stateManip_put [Int] i in
                               case put_res of
                                 | {a2 : Unit, state3 : Int} =>
                                     stateManip_modify state2 [Int] (\(s : Int) -> s)
                               end
                       end;

stateManip_get : Int -> forall S . Id {Int, Int} =
  \(s : Int) -> /\S . return [Id] {s, s};

stateManip_put : forall S . Int -> Id {Unit, Int} =
  /\S . \(s : Int) -> return [Id] {unit, s};

stateManip_modify : Int -> forall S . (Int -> Int) -> Id {Unit, Int} =
  \(s : Int) -> /\S . \(f : Int -> Int) -> return [Id] {unit, f s};

execState : forall S . forall A . (S -> Id {A, S}) -> S -> Id S =
  /\S . /\A . \(f : S -> Id {A, S}) -> \(s : S) -> let (res : {A, S}) <- f s in
                                                     case res of
                                                       | {a : A, s1 : S} => return [Id] s1
                                                     end;

evalState : forall S . forall A . (S -> Id {A, S}) -> S -> Id A =
  /\S . /\A . \(f : S -> Id {A, S}) -> \(s : S) -> let (res : {A, S}) <- f s in
                                                     case res of
                                                       | {a : A, s1 : S} => return [Id] a
                                                     end;

