type T = MkT | MkU;

type Pair A B = MkPair A B;

type Impure A = MkImpure ((IO ::: State) A);

type TypeWithTuple = MkTuple {Int, Bool};

main : Unit = unit;

conTFun : T = MkT;

varFun : Unit = main;

lambdaFun : Bool -> Char = \(b : Bool) -> 'a';

lambdaVarAccess : Float -> Float = \(f : Float) -> f;

lambdaVarAccessApp : Float = lambdaVarAccess 0.01;

nestedApp : Unit = (\(i : Int) -> \(f : Float) -> unit) 1 0.02;

id : forall A . A -> A = /\A . \(x : A) -> x;

# Monomorphising id with Int
idInt : Int -> Int = id [Int];

# "Monomorphising" id with polymorphic type
# This checks for alpha equivalence as well
idFun : (forall B . B -> B) -> (forall C . C -> C) =
  id [forall A . A -> A];

# This checks for alpha equivalence
idFunApp : forall V . V -> V = idFun id;

# Failing test case that shows the limitations of the implemented alpha-eq.
# alphaEqCapture : (forall B . forall A . B -> A) -> (forall B . forall A . B -> A) =
#   id [forall A . forall B . A -> B];

conPairFun : forall A . forall B . A -> B -> Pair A B = MkPair;

appCon : Pair Int Bool = MkPair [Int] [Bool] 1 True;

tup : {Int, {}, {Char}, Bool -> Float} = {1, {}, {'a'}, \(b : Bool) -> 0.01};

subTypeTup : {{Int}} = {{1, True}, False};

litPat : Unit =
  case 1 of
    | 0 => unit
    | 1 => unit
    | _ => unit
  end;

varPat : Int =
  case 1 of
    | (x : Int) => x
  end;

conPat : {Int, Bool} =
  case MkPair [Int] [Bool] 1 True of
    | MkPair (i : Int) (b : Bool) => {i, b}
  end;

tuplePat : Int =
  case {True, 1} of
    | {b : Bool, i : Int} => i
  end;

conTuplePat : {Int, Bool} =
  case MkTuple {1, True} of
    | MkTuple (t : {Int, Bool}) => t
  end;

defaultPat : Int =
  case idFun of
    | _ => 1
  end;

caseAltEffects : (Error Unit ::: (IO ::: State)) Unit =
  case 1 of
    | 0 => throw_error [Unit] [Unit] unit
    | 1 => return [Error Unit ::: (IO ::: State)] unit
    | 2 => return [Error Unit ::: IO] unit
  end;

ioFun : IO Unit =
  return [IO] unit;

ioStateFun : (IO ::: State) Unit =
  return [IO ::: State] unit;

simpleBind : IO Unit =
  let (x : Unit) <- return [IO] unit in
    return [IO] x;

simpleBindMonadCons : (State ::: IO) Unit =
  let (x : Unit) <- return [State ::: IO] unit in
    return [State ::: IO] x;

simpleLift : (State ::: IO) Int =
  lift [IO => State ::: IO] return [IO] 1;

consLift : (Id ::: (State ::: IO)) Int =
  lift [State ::: IO => Id ::: (State ::: IO)] simpleLift;

implicitMonadQuantification : (State ::: IO) Int =
  return [State] 1;

bindHigherEffect : (IO ::: State) Int =
  let (x : Int) <- return [IO] 1 in
    return [IO ::: State] 2;

bindHigherEffect2 : (IO ::: State) Int =
  let (x : Int) <- return [IO ::: State] 1 in
    return [IO] 2;

takesMonadicComp : (IO ::: State) Int -> (IO ::: State) Int =
  \(f : (IO ::: State) Int) ->
    let (x : Int) <- f in return [IO ::: State] x;

passIOComp : (IO ::: State) Int = takesMonadicComp (return [IO] 1);

relaxedLift : (Id ::: (IO ::: State)) Int =
  lift [IO ::: State => Id ::: (IO ::: State)] return [IO] 1;

letRec : Int =
  let rec (x : Int) <- x
  in x;

multLetRec : {Int, Int} =
  let rec (x : Int) <- y;
          (y : Int) <- x
  in {x, y};

