type T = MkT | MkU;

type Pair A B = MkPair A B;

type Impure A = MkImpure ((IO ::: NonTerm) A);

main : Unit = unit;

conTFun : T = MkT;

varFun : Unit = main;

lambdaFun : Bool -> Char = \(b : Bool) -> 'a';

lambdaVarAccess : Float -> Float = \(f : Float) -> f;

lambdaVarAccessApp : Float = lambdaVarAccess 0.01;

nestedApp : Unit = (\(i : Int) -> \(f : Float) -> unit) 1 0.02;

id : forall A . A -> A = /\A . \(x : A) -> x;

# Monomorphising id with Int
idInt : Int -> Int = id [Int];

# "Monomorphising" id with polymorphic type
# This checks for alpha equivalence as well
idFun : (forall B . B -> B) -> (forall C . C -> C) =
  id [forall A . A -> A];

# This checks for alpha equivalence
idFunApp : forall V . V -> V = idFun id;

conPairFun : forall A . forall B . A -> B -> Pair A B = MkPair;

appCon : Pair Int Bool = MkPair [Int] [Bool] 1 True;

